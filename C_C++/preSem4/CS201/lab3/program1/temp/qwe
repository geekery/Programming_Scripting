C++ are first feature require intelligence the than usually on UNIX Somehow compiler linker to sure each instance exactly in executable it needed, not all There two approaches this which will to the model the model. model C++ the instantiation by the equivalent common to linker; compiler template in translation that them, the collapses together. advantage this is the only to the files there no complexity worry This is compilation is because template is compiled Code for model to definitions all in header since must seen be Cfront The C++ Cfront, the instantiation by the of template an maintained where instances stored. more version the works follows: individual files built, compiler any definitions instantiations in repository. link the wrapper in objects the and any instances were previously The of model more compilation and ability use system to the model compiler also to the The are increased and potential error; some this be as but practice can very to multiple in directory one in directories. written this tends separate of member into separate which be separately. used GNU version or on ELF such Linux/GNU Solaris or Microsoft g++ the model. other g++ neither model. future of will a model the will any for the definition included the and template and context into object for rest. link will that as and the to the instantiations. linker then duplicate In mean you the options dealing template 1. your code `-frepo'. compiler generate with extension listing of template used the object which be there; link `collect2', then the files tell compiler to those and any object The overhead negligible the pass, the will to the in same This your option application written the model, it just Code for Cfront will to modified that template are at or points instantiation; this as as #include to end each header. 